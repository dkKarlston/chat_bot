import webbrowser
from argparse import Action
from ast import literal_eval
from datetime import datetime
from random import random
from tkinter import Text
from typing import Dict, Any, List

from rasa_sdk import Tracker, logger
from rasa_sdk.events import SlotSet
from rasa_sdk.executor import CollectingDispatcher
import datetime
import random

FACTS = {
    "—Å–ø–æ—Ä—Ç": [
        "–ë–∞–¥–º–∏–Ω—Ç–æ–Ω ‚Äì —è–≤–ª—è–µ—Ç—Å—è —Å–∞–º—ã–º –±—ã—Å—Ç—Ä—ã–º —Ä–∞–∫–µ—Ç–æ—á–Ω—ã–º –≤–∏–¥–æ–º —Å–ø–æ—Ä—Ç–∞: —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ–ª–µ—Ç–∞ –≤–æ–ª–∞–Ω–∞ –º–æ–∂–µ—Ç –¥–æ—Å—Ç–∏–≥–∞—Ç—å –≤ —Å—Ä–µ–¥–Ω–µ–º "
        "270 –∫–º/—á–∞—Å.",
        "–í —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º –º—è—á–∏–∫–µ –¥–ª—è –≥–æ–ª—å—Ñ–∞ –≤—Å–µ–≥–æ 336 –≤—ã–µ–º–æ–∫.",
        "–í –ø–µ–ª–æ—Ç–æ–Ω–µ –§–æ—Ä–º—É–ª—ã-1 –Ω–µ—Ç –±–æ–ª–∏–¥–∞ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º 13, –ø–æ—Å–ª–µ 12-–≥–æ —Å—Ä–∞–∑—É –∏–¥—ë—Ç 1",
        "–§–µ—Ä–Ω–∞–Ω–¥–æ –ê–ª–æ–Ω—Å–æ, –≥–æ–Ω—â–∏–∫ ¬´–§–æ—Ä–º—É–ª—ã-1¬ª, —Å–µ–ª –∑–∞ —Ä—É–ª—å –∫–∞—Ä—Ç–∞ –≤ —Ç—Ä–∏ –≥–æ–¥–∞.",
        "–ù–∏–ª—å—Å –ë–æ—Ä, –∑–Ω–∞–º–µ–Ω–∏—Ç—ã–π —Ñ–∏–∑–∏–∫, –±—ã–ª –≤—Ä–∞—Ç–∞—Ä—ë–º —Å–±–æ—Ä–Ω–æ–π –î–∞–Ω–∏–∏.",
    ],
    "–∏—Å—Ç–æ—Ä–∏—è": [
        "–í–µ–ª–∏–∫–∞—è –∫–∏—Ç–∞–π—Å–∫–∞—è —Å—Ç–µ–Ω–∞ –Ω–µ –≤–∏–¥–Ω–∞ —Å –õ—É–Ω—ã –Ω–µ–≤–æ–æ—Ä—É–∂–µ–Ω–Ω—ã–º –≥–ª–∞–∑–æ–º.",
        "–ü–µ—Ä–≤–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –±—ã–ª–∞ —Å–¥–µ–ª–∞–Ω–∞ –≤ 1826 –≥–æ–¥—É.",
        "–†–∏–º –±—ã–ª –æ—Å–Ω–æ–≤–∞–Ω –≤ 753 –≥–æ–¥—É –¥–æ –Ω–∞—à–µ–π —ç—Ä—ã.",
        "–ü–µ—Ç—Ä¬ª.",
        "–ê—Ä–∞–±—Å–∫–∏–µ —Ü–∏—Ñ—Ä—ã –∏–∑–æ–±—Ä–µ–ª–∏—Å—å –Ω–µ –∞—Ä–∞–±–∞–º–∏, –∞ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞–º–∏ –∏–∑ –ò–Ω–¥–∏–∏.",
        "–ö–æ–≥–¥–∞-—Ç–æ –º–æ—Ä—Ñ–∏–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–∞—à–ª—è.",
    ],
    "–∫–æ—Å–º–æ—Å": [
        "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –í–µ–Ω–µ—Ä—ã –¥–æ—Å—Ç–∏–≥–∞–µ—Ç 465¬∞C, —á—Ç–æ –≥–æ—Ä—è—á–µ–µ, —á–µ–º –Ω–∞ –ú–µ—Ä–∫—É—Ä–∏–∏, —Ö–æ—Ç—è –í–µ–Ω–µ—Ä–∞ –¥–∞–ª—å—à–µ –æ—Ç –°–æ–ª–Ω—Ü–∞.",
        "–°–∞–º–∞—è –≤—ã—Å–æ–∫–∞—è –≥–æ—Ä–∞ –≤ –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ - –≥–æ—Ä–∞ –û–ª–∏–º–ø –Ω–∞ –ú–∞—Ä—Å–µ. –ï–µ –≤—ã—Å–æ—Ç–∞ –¥–æ—Å—Ç–∏–≥–∞–µ—Ç 21 –∫–∏–ª–æ–º–µ—Ç—Ä.",
        "–ù–µ–π—Ç—Ä–æ–Ω–Ω—ã–µ –∑–≤–µ–∑–¥—ã –º–æ–≥—É—Ç –≤—Ä–∞—â–∞—Ç—å—Å—è —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é –¥–æ 600 –æ–±–æ—Ä–æ—Ç–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É.",
        "–í –∫–æ—Å–º–æ—Å–µ –Ω–µ–ª—å–∑—è –∑–∞–ø–ª–∞–∫–∞—Ç—å. –í —É—Å–ª–æ–≤–∏—è—Ö –º–∏–∫—Ä–æ–≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–∏ —Å–ª–µ–∑—ã –Ω–µ –ø–∞–¥–∞—é—Ç –≤–Ω–∏–∑, –∫–∞–∫ –Ω–∞ –ó–µ–º–ª–µ, –∞ –æ—Å—Ç–∞—é—Ç—Å—è –Ω–∞ "
        "–≥–ª–∞–∑–∞—Ö –≤ –≤–∏–¥–µ –º–∞–ª–µ–Ω—å–∫–∏—Ö –∫–∞–ø–µ–ª—å.",
        "–í –∫–æ—Å–º–æ—Å–µ –Ω–µ—Ç –∑–≤—É–∫–∞. –ó–≤—É–∫ –Ω–µ –º–æ–∂–µ—Ç —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—Ç—å—Å—è –≤ –≤–∞–∫—É—É–º–µ, —Ç–∞–∫ –∫–∞–∫ –µ–º—É –Ω—É–∂–Ω—ã –º–æ–ª–µ–∫—É–ª—ã –≤–æ–∑–¥—É—Ö–∞ –∏–ª–∏ "
        "–¥—Ä—É–≥–æ–≥–æ –≤–µ—â–µ—Å—Ç–≤–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤–æ–ª–Ω.",
        "–°–∞—Ç—É—Ä–Ω –º–æ–∂–µ—Ç –ø–ª–∞–≤–∞—Ç—å –≤ –≤–æ–¥–µ. –ï—Å–ª–∏ –±—ã —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª –±–∞—Å—Å–µ–π–Ω —Å –≤–æ–¥–æ–π –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞, –°–∞—Ç—É—Ä–Ω, –∏–∑-–∑–∞ —Å–≤–æ–µ–π "
        "–Ω–∏–∑–∫–æ–π –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏, –ø–ª–∞–≤–∞–ª –±—ã –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏.",
    ],
}


def name() -> str:
    return "action_get_time"


class ActionGetTime(Action):

    def run(
            self,
            dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]
    ) -> List[Dict[Text, Any]]:

        try:

            now = datetime.datetime.now()
            current_time = now.strftime("%H:%M")
            current_date = now.strftime("%d.%m.%Y")

            message = f"–°–µ–π—á–∞—Å {current_time}, —Å–µ–≥–æ–¥–Ω—è {current_date}"
            dispatcher.utter_message(text=message)

            return []

        except Exception as e:
            dispatcher.utter_message(text="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è.")
            logger.error(f"Error in action_get_time: {e}")
            return []  # –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫, –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ


class ActionTellFact(Action):
    def name(self) -> str:
        return "action_tell_fact"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> list[dict[str, Any]]:
        category = tracker.get_slot("category")
        if not category or category not in FACTS:
            dispatcher.utter_message(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: —Å–ø–æ—Ä—Ç, –∏—Å—Ç–æ—Ä–∏—è –∏–ª–∏ –∫–æ—Å–º–æ—Å.")
            return [SlotSet("category", None)]

        fact = random.choice(FACTS[category])
        dispatcher.utter_message(text=fact)
        return [SlotSet("category", None)]


class ActionSearchWeb(Action):
    def name(self) -> str:
        return "action_search_web"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        query = tracker.get_slot("query")
        if not query:
            dispatcher.utter_message(text="–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏?")
            return []

        try:
            url = f"https://www.google.com/search?q={query.replace(' ', '+')}"
            webbrowser.open_new_tab(url)
            dispatcher.utter_message(text=f"–ò—â—É '{query}' –≤ Google...")
        except Exception as e:
            dispatcher.utter_message(text="–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫")

        return []


class ActionCalculate(Action):
    from ast import literal_eval
    def name(self) -> str:
        return "action_calculate"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> list[Any] | list[dict[str, Any]]:

        expression = tracker.get_slot("expression")
        if not expression:
            dispatcher.utter_message(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è.")
            return []

        try:
            expression = expression.replace('x', '*').replace('^', '**')
            result = literal_eval(expression)
            dispatcher.utter_message(text=f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        except (SyntaxError, TypeError, NameError, ZeroDivisionError):
            dispatcher.utter_message(text="–ù–µ –º–æ–≥—É –≤—ã—á–∏—Å–ª–∏—Ç—å —ç—Ç–æ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ.")

        return [SlotSet("expression", None)]


class ActionAnalyzeMood(Action):
    def name(self) -> str:
        return "action_analyze_mood"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        user_message = tracker.latest_message.get("text", "").lower()

        positive_words = ["—Ö–æ—Ä–æ—à–æ", "–æ—Ç–ª–∏—á–Ω–æ", "–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ", "—Ä–∞–¥–æ—Å—Ç", "—Å—á–∞—Å—Ç–ª–∏–≤", "—É—Ä–∞", "–ª—é–±–ª—é", "–∫–ª–∞—Å—Å–Ω–æ",
                          "–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ"]
        negative_words = ["–ø–ª–æ—Ö–æ", "—É–∂–∞—Å–Ω–æ", "–≥—Ä—É—Å—Ç–Ω–æ", "–Ω–µ—Å—á–∞—Å—Ç", "—Ç–æ—Å–∫–ª–∏–≤–æ", "—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω", "—É—Å—Ç–∞–ª", "–±–µ—Å–∏—Ç"]

        positive_count = sum(word in user_message for word in positive_words)
        negative_count = sum(word in user_message for word in negative_words)

        if positive_count > negative_count:
            mood = "positive"
        elif negative_count > positive_count:
            mood = "negative"
        else:
            mood = "neutral"

        responses = {
            "positive": [
                "–¢—ã –∑–≤—É—á–∏—à—å –æ—á–µ–Ω—å –ø–æ–∑–∏—Ç–∏–≤–Ω–æ! üòÑ –ß–µ–º –º–æ–≥—É –ø–æ—Ä–∞–¥–æ–≤–∞—Ç—å —Ç–µ–±—è –µ—â—ë?",
                "–ü–æ—Ö–æ–∂–µ, —É –≤–∞—Å –æ—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ!",
                "–Ø —á—É–≤—Å—Ç–≤—É—é –≤–∞—à—É —Ä–∞–¥–æ—Å—Ç—å! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!"
            ],
            "negative": [
                "–¢—ã, –ø–æ—Ö–æ–∂–µ, –Ω–µ –≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏... üòî –•–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ–± —ç—Ç–æ–º?",
                "–ö–∞–∂–µ—Ç—Å—è, –≤–∞–º —Å–µ–π—á–∞—Å –Ω–µ–ª–µ–≥–∫–æ...",
                "–í–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–∞–∂–µ—Ç—Å—è –ø–æ–¥–∞–≤–ª–µ–Ω–Ω—ã–º. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å - —è –∑–¥–µ—Å—å."
            ],
            "neutral": [
                "–£–ª–∞–≤–ª–∏–≤–∞—é –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –Ω–∞—Å—Ç—Ä–æ–π. –°–ø—Ä–∞—à–∏–≤–∞–π, –µ—Å–ª–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –Ω—É–∂–Ω–æ!",
                "–í–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–∞–∂–µ—Ç—Å—è —Ä–æ–≤–Ω—ã–º. –í—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ?",
                "–ü–æ—Ö–æ–∂–µ, —É –≤–∞—Å –æ–±—ã—á–Ω—ã–π –¥–µ–Ω—å. –ù–∞–¥–µ—é—Å—å, –æ–Ω —Å—Ç–∞–Ω–µ—Ç –µ—â–µ –ª—É—á—à–µ!"
            ]
        }

        dispatcher.utter_message(text=random.choice(responses[mood]))
        return []
